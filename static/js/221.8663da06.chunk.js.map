{"version":3,"file":"static/js/221.8663da06.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","components/common/InputField.js","pages/RegisterPage/RegisterPage.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport styled from 'styled-components';\n\nexport const StyledTitle = styled.h2`\n  margin-bottom: 30px;\n`;\n\nexport const InputsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-bottom: 30px;\n`;\n\nexport const StyledLoadingButton = styled(LoadingButton)`\n  & .MuiLoadingButton-loadingIndicator {\n    color: ${props => props.theme.colors.white};\n  }\n`;\n","import { TextField } from '@mui/material';\nimport styled from 'styled-components';\n\nconst StyledTextField = styled(TextField)`\n  & .MuiInputBase-input {\n    color: #ffffff;\n    transition: color 250ms ease-in;\n    &:-webkit-autofill,\n    &:-webkit-autofill:hover,\n    &:-webkit-autofill:focus {\n      -webkit-text-fill-color: white;\n      -webkit-box-shadow: 0 0 0px 50px rgb(42, 44, 54) inset;\n      transition: background-color 5000s ease-in-out 0s;\n    }\n  }\n\n  & .MuiInputLabel-root {\n    color: ${({ status, theme }) => {\n      if (status === 'success') {\n        return theme.colors.success;\n      } else if (status === 'idle') {\n        return theme.colors.labelColor;\n      }\n    }};\n    transition: color 250ms ease-in transform 250ms ease-in;\n  }\n\n  & .MuiInputLabel-root.Mui-focused {\n    color: ${({ status, theme }) => {\n      if (status === 'success') {\n        return theme.colors.success;\n      } else if (status === 'idle') {\n        return '#fff';\n      }\n    }};\n  }\n\n  & .MuiInputBase-root.Mui-focused fieldset.MuiOutlinedInput-notchedOutline {\n    border-color: ${({ status, theme }) => {\n      if (status === 'success') {\n        return theme.colors.success;\n      } else if (status === 'idle') {\n        return theme.colors.white;\n      }\n    }};\n    border-width: 1px;\n  }\n\n  & .MuiOutlinedInput-notchedOutline {\n    border-color: ${({ status, theme }) => {\n      if (status === 'success') {\n        return theme.colors.success;\n      } else if (status === 'idle') {\n        return theme.colors.inputBorderColor;\n      }\n    }};\n    transition: border-color 250ms ease-in;\n  }\n\n  & .MuiFormHelperText-root {\n    margin-left: 0;\n  }\n\n  & span.MuiFormLabel-asterisk {\n    color: inherit;\n  }\n\n  & label.MuiInputLabel-root.Mui-error {\n    color: ${({ status, theme }) => {\n      if (status === 'error') {\n        return theme.colors.error;\n      } else if (status === 'idle') {\n        return theme.colors.labelColor;\n      }\n    }};\n  }\n  &:hover label.MuiInputLabel-root.Mui-error {\n    color: ${({ status, theme }) => {\n      if (status === 'error') {\n        return theme.colors.error;\n      } else if (status === 'idle') {\n        return theme.colors.white;\n      }\n    }};\n  }\n\n  & .Mui-error fieldset.MuiOutlinedInput-notchedOutline {\n    border-color: ${({ status, theme }) => {\n      if (status === 'error') {\n        return theme.colors.error;\n      } else if (status === 'idle') {\n        return theme.colors.inputBorderColor;\n      }\n    }};\n  }\n\n  &:hover fieldset.MuiOutlinedInput-notchedOutline {\n    border-color: ${({ status, theme }) => {\n      if (status === 'success') {\n        return theme.colors.success;\n      } else if (status === 'idle') {\n        return theme.colors.white;\n      }\n    }};\n  }\n\n  &:hover .MuiInputLabel-root {\n    color: ${({ status, theme }) => {\n      if (status === 'success') {\n        return theme.colors.success;\n      } else if (status === 'idle') {\n        return '#fff';\n      }\n    }};\n  }\n`;\n\nconst defineStatus = (form, name) => {\n  if (!form.touched[name] || !form.values[name]) {\n    return 'idle';\n  } else if (Boolean(form.errors[name])) {\n    return 'failed';\n  } else {\n    return 'success';\n  }\n};\n\nconst setTouched = (form, name) => {\n  form.touched[name] = true;\n};\n\nexport const InputField = ({ name, label, type, formik }) => {\n  return (\n    <StyledTextField\n      required\n      label={label}\n      name={name}\n      type={type}\n      autoComplete=\"on\"\n      fullWidth\n      value={formik.values[name]}\n      onChange={formik.handleChange}\n      onBlur={formik.handleBlur}\n      onClick={() => setTouched(formik, name)}\n      status={defineStatus(formik, name)}\n      error={formik.touched[name] && Boolean(formik.errors[name])}\n      helperText={formik.touched[name] && formik.errors[name]}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormWrapper = styled.div`\n  position: absolute;\n  top: 30%;\n  left: 58%;\n  width: 100%;\n  max-width: 400px;\n  padding: 20px;\n\n  background-color: ${({ theme }) => theme.colors.backgroundDarkblue};\n  color: ${({ theme }) => theme.colors.textLight};\n  border-radius: 8px;\n`;\n\nexport const Image = styled.img`\n  padding-top: 127px;\n`;\n\nexport const Section = styled.section`\n  padding-top: 60px;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.registrationPageBackground};\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { useFormik } from 'formik';\nimport { object, string } from 'yup';\n\nimport { register } from 'redux/auth/authApi';\nimport { selectIsAuthLoading } from 'redux/selectors';\n\nimport {\n  InputsContainer,\n  StyledLoadingButton,\n  StyledTitle,\n} from './RegisterForm.styled';\nimport { InputField } from 'components/common';\n\nconst registrationSchema = object({\n  name: string()\n    .trim()\n    .required('Name is required')\n    .min(2, 'Name should be of minimum 2 characters length')\n    .matches('^[a-zA-Z]+$', 'Name must contain only letters'),\n  email: string('Enter your email')\n    .trim()\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: string('Enter your password')\n    .trim()\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const isRegLoading = useSelector(selectIsAuthLoading);\n\n  const handleRegFormSumbit = (data, { resetForm }) => {\n    dispatch(register(data));\n    resetForm();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: registrationSchema,\n    onSubmit: handleRegFormSumbit,\n  });\n\n  return (\n    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n      <StyledTitle>Registration</StyledTitle>\n      <InputsContainer>\n        <InputField name=\"name\" type=\"text\" label=\"Name\" formik={formik} />\n        <InputField name=\"email\" type=\"email\" label=\"Email\" formik={formik} />\n        <InputField\n          name=\"password\"\n          type=\"password\"\n          label=\"Password\"\n          formik={formik}\n        />\n      </InputsContainer>\n      <StyledLoadingButton\n        fullWidth\n        type=\"submit\"\n        color=\"primary\"\n        variant=\"contained\"\n        loading={isRegLoading}\n      >\n        <span>Sign up</span>\n      </StyledLoadingButton>\n    </form>\n  );\n};\n","import { Container } from 'components/Container.styled';\nimport { RegisterForm } from 'components/RegisterForm';\nimport { FormWrapper, Image, Section } from './RegisterPage.styled';\n\nimport loginImage from 'images/registerImage.png';\n\nconst RegisterPage = () => {\n  return (\n    <Section>\n      <Container>\n        <Image src={loginImage} alt=\"a girl searching the Net\" />\n        <FormWrapper>\n          <RegisterForm />\n        </FormWrapper>\n      </Container>\n    </Section>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["StyledTitle","styled","InputsContainer","StyledLoadingButton","LoadingButton","props","theme","colors","white","StyledTextField","TextField","status","success","labelColor","inputBorderColor","error","defineStatus","form","name","touched","values","Boolean","errors","InputField","label","type","formik","required","autoComplete","fullWidth","value","onChange","handleChange","onBlur","handleBlur","onClick","setTouched","helperText","FormWrapper","backgroundDarkblue","textLight","Image","Section","registrationPageBackground","registrationSchema","object","string","trim","min","matches","email","password","RegisterForm","dispatch","useDispatch","isRegLoading","useSelector","selectIsAuthLoading","useFormik","initialValues","validationSchema","onSubmit","data","resetForm","register","handleSubmit","color","variant","loading","src","loginImage","alt"],"sourceRoot":""}