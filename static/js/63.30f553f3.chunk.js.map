{"version":3,"file":"static/js/63.30f553f3.chunk.js","mappings":"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","sources":["components/ContactFormThunk/ContactForm.styled.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactFormThunk/ContactForm.module.css?0946","components/ContactFormThunk/ContactForm.jsx","components/ContactItemThunk/ContactItem.styled.js","components/ContactItemThunk/ContactItem.jsx","components/ContactListThunk/ContactList.styled.js","components/ContactListThunk/ContactList.jsx","components/ContactCardThunk/ContactCard.styled.js","components/ContactCardThunk/ContactCard.jsx","components/Phonekook(create_async_thunk)/Phonebook.styled.js","components/Phonekook(create_async_thunk)/Phonebook.jsx","pages/PhonebookPage_thunk/PhonebookPageThunk.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nimport { TextButton } from 'components/TextButton';\n\nexport const FormButton = styled(TextButton)`\n  margin: 30px auto 0;\n`;\n","// extracted by mini-css-extract-plugin\nexport default {\"contact_form_input\":\"ContactForm_contact_form_input__C-9ah\",\"contact_form_group\":\"ContactForm_contact_form_group__nkk6u\",\"contact_form_inner_group\":\"ContactForm_contact_form_inner_group__K0bIV\",\"contact_form_label\":\"ContactForm_contact_form_label__xfWKp\",\"contact_form_error\":\"ContactForm_contact_form_error__rowDc\"};","import { useSelector } from 'react-redux';\n\nimport { selectContacts } from 'redux/selectors';\nimport { Formik, Form } from 'formik';\nimport { object, string } from 'yup';\n\nimport { TextInput } from 'components/TextInput';\nimport { FormButton } from './ContactForm.styled';\nimport { Notification } from 'components/Notification';\nimport css from './ContactForm.module.css';\n\nconst STATUS = {\n  success: 'success',\n  error: 'error',\n};\n\nconst nameExpression = RegExp(\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n);\n\nexport const ContactForm = ({ initialValues, handleContactChange }) => {\n  const contacts = useSelector(selectContacts);\n\n  const contactSchema = object({\n    name: string()\n      .required()\n      .min(2, 'Name must be at least 2 characters')\n      .matches(\n        nameExpression,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .test(\n        'Name was entered successfully',\n        'This name is already taken',\n        value => {\n          if (initialValues) {\n            return !findContactByNameAndId(value);\n          }\n          return !findContactByName(value);\n        }\n      ),\n    number: string()\n      .required()\n      .matches(\n        /^\\+?\\d{1,4}[-.\\s]?\\d{1,3}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .min(6, 'Number must be at least 6 characters')\n      .test(\n        'Number was entered successfully',\n        'This number is already taken',\n        value => {\n          if (initialValues) {\n            return !findContactByNumberAndId(value);\n          }\n          return !findContactByNumber(value);\n        }\n      ),\n  });\n\n  const handleFormSubmit = values => {\n    handleContactChange(values);\n  };\n\n  const findContactByName = nameValue => {\n    return contacts?.find(({ name }) => name === nameValue);\n  };\n\n  const findContactByNumber = numberValue =>\n    contacts?.find(({ number }) => numberValue === number);\n\n  const findContactByNameAndId = nameValue => {\n    return contacts?.find(contact => {\n      return nameValue === contact.name && contact.id !== initialValues.id;\n    });\n  };\n\n  const findContactByNumberAndId = numberValue => {\n    return contacts?.find(contact => {\n      return numberValue === contact.number && contact.id !== initialValues.id;\n    });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues ?? { name: '', number: '' }}\n      validationSchema={contactSchema}\n      onSubmit={handleFormSubmit}\n    >\n      {({ values, errors, touched, handleChange, handleBlur }) => (\n        <Form>\n          <label className={css.contact_form_group}>\n            <span className={css.contact_form_inner_group}>\n              <span className={css.contact_form_label}>Name</span>\n              <TextInput\n                className={css.contact_form_input}\n                type=\"text\"\n                name=\"name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.name}\n              />\n            </span>\n            {!touched.name && <Notification>Enter a name</Notification>}\n            {touched.name && !errors.name && (\n              <Notification status={STATUS.success}>\n                Name was entered successfully\n              </Notification>\n            )}\n            {touched.name && errors.name && (\n              <Notification status={STATUS.error}>{errors.name}</Notification>\n            )}\n          </label>\n          <label className={css.contact_form_group}>\n            <span className={css.contact_form_inner_group}>\n              <span className={css.contact_form_label}>Number</span>\n              <TextInput\n                className={css.contact_form_input}\n                type=\"tel\"\n                name=\"number\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.number}\n              />\n            </span>\n            {!touched.number && <Notification>Enter a number</Notification>}\n            {touched.number && !errors.number && (\n              <Notification status={STATUS.success}>\n                Number was entered successfully\n              </Notification>\n            )}\n            {touched.number && errors.number && (\n              <Notification status={STATUS.error}>{errors.number}</Notification>\n            )}\n          </label>\n          <FormButton text=\"Confirm\" type=\"submit\"></FormButton>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Card = styled.div`\n  padding: 6px 19px 6px 9px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 20px;\n`;\n\nexport const TextField = styled.p`\n  width: 100%;\n  max-width: 200px;\n  word-break: break-all;\n`;\n","import { Card, TextField } from './ContactItem.styled';\nimport contactImage from 'images/itemImage.jpg';\n\nexport const ContactItem = ({ name, number }) => {\n  return (\n    <Card>\n      <span>\n        <img src={contactImage} alt=\"Contact avatar\" />\n      </span>\n      <TextField>{name}</TextField>\n      <TextField>{number}</TextField>\n    </Card>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  flex-basis: 70%;\n  padding: 11px 20px 0;\n  display: flex;\n  flex-direction: column;\n  gap: 22px;\n  border: 3px solid rgba(154, 154, 154, 0.09);\n  border-top: 0;\n`;\n\nexport const StyledItem = styled.li`\n  position: relative;\n  border-radius: 10px;\n  border: 0.5px solid rgba(137, 137, 137, 0.43);\n  cursor: pointer;\n\n  ${({ generateLetter }) => {\n    if (generateLetter) {\n      return `\n        margin-top: 20px;\n\n        &::before {\n          content: '${generateLetter}';\n          position: absolute;\n          top: -35px;\n              padding: 3px 0px 3px 25px;\n    font-size: 18px;\n    right: -21px;\n    font-weight: 500;\n          left: -21px;\n          background-color: aqua;\n        }\n\n        &:first-child{\n          margin-top: 22.6px;\n        }\n      `;\n    }\n  }}\n`;\n\nexport const MessageWrapper = styled.div`\n  flex-basis: 70%;\n  padding: 11px 20px 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 3px solid rgba(154, 154, 154, 0.09);\n  border-top: 0;\n`;\n","import { useSelector } from 'react-redux';\n\nimport { Message } from 'components/Message';\nimport { ContactItem } from 'components/ContactItemThunk';\nimport { StyledList, StyledItem, MessageWrapper } from './ContactList.styled';\n\nimport { selectFilterByOption, selectFilteredContacts } from 'redux/selectors';\n\nconst findUsedLetters = data => {\n  const arrOfLetters = [];\n\n  if (!data) return null;\n\n  for (const item of data) {\n    const letter = item.name.toUpperCase()[0];\n    if (arrOfLetters.includes(letter)) {\n      continue;\n    }\n\n    arrOfLetters.push(letter);\n  }\n\n  return arrOfLetters.map(item => ({ letter: item, isUsed: false }));\n};\n\nexport const ContactList = ({ chooseContact }) => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const option = useSelector(selectFilterByOption);\n  const usedLetters = findUsedLetters(filteredContacts);\n\n  const generateLetter = item => {\n    if (option !== 'ascending' && option !== 'descending') {\n      return null;\n    }\n\n    const letterToGenerate = item.name.toUpperCase()[0];\n    const letterOptions = usedLetters.find(i => i.letter === letterToGenerate);\n\n    if (letterOptions.isUsed) return null;\n\n    letterOptions.isUsed = true;\n    return letterToGenerate;\n  };\n\n  return (\n    <>\n      {filteredContacts.length ? (\n        <StyledList>\n          {filteredContacts.map(item => (\n            <StyledItem\n              generateLetter={generateLetter(item)}\n              onClick={() => chooseContact(item)}\n              key={item.id}\n            >\n              <ContactItem {...item} />\n            </StyledItem>\n          ))}\n        </StyledList>\n      ) : (\n        <MessageWrapper>\n          <Message text=\"There are no contacts here\" />\n        </MessageWrapper>\n      )}\n    </>\n  );\n};\n","import { Button } from '@mui/material';\nimport styled from 'styled-components';\n\nexport const OuterWrapper = styled.div`\n  flex-grow: 1;\n  border-right: 3px solid rgba(154, 154, 154, 0.09);\n  border-bottom: 3px solid rgba(154, 154, 154, 0.09);\n`;\n\nexport const InnerWrapper = styled.div`\n  position: relative;\n  width: 280px;\n  margin: 0 auto;\n`;\n\nexport const ContentWrapper = styled.div`\n  position: fixed;\n  top: 20%;\n  width: 280px;\n`;\n\nexport const InfoWrapper = styled.div`\n  padding: 70px 0 30px 0;\n  text-align: center;\n`;\n\nexport const ImageWrapper = styled.div`\n  width: 100px;\n  margin: 0 auto 5px;\n`;\n\nexport const StyledDelButton = styled(Button)`\n  &.MuiButtonBase-root {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { MdDelete } from 'react-icons/md';\nimport { FiEdit } from 'react-icons/fi';\n\nimport { DeleteModal } from 'components/DeleteModal';\nimport { ContactForm } from 'components/ContactFormThunk';\nimport { FormModal } from 'components/FormModal';\nimport { ContactCardOptions } from 'components/ContactCardOptions';\nimport {\n  ContentWrapper,\n  ImageWrapper,\n  InfoWrapper,\n  InnerWrapper,\n  OuterWrapper,\n  StyledDelButton,\n} from './ContactCard.styled';\nimport userImage from 'images/itemImage.jpg';\n\nimport { editContact, removeContact } from 'redux/contacts/contactsApiThunk';\n\nexport const ContactCard = ({ data: { name, number, id }, chooseContact }) => {\n  const dispatch = useDispatch();\n\n  const [isDeleteModalShown, setIsDeleteModalShown] = useState(false);\n  const [isEditModalShown, setIsEditModalShown] = useState(false);\n\n  const closeModal = () => {\n    setIsDeleteModalShown(false);\n    setIsEditModalShown(false);\n  };\n\n  const handleDeleteContact = async () => {\n    dispatch(removeContact(id));\n    chooseContact(null);\n    closeModal();\n  };\n\n  const handleEditContact = async data => {\n    if (name === data.name && number === data.number) {\n      closeModal();\n      return;\n    }\n\n    dispatch(editContact(data));\n    chooseContact(data);\n    closeModal();\n  };\n\n  return (\n    <>\n      <OuterWrapper>\n        <InnerWrapper>\n          <ContentWrapper>\n            <InfoWrapper>\n              <ImageWrapper>\n                <img src={userImage} alt=\"Contact avatar\" width={100} />\n              </ImageWrapper>\n              <h3>{name}</h3>\n            </InfoWrapper>\n            <ContactCardOptions name={name} number={number} />\n            <StyledDelButton\n              fullWidth\n              variant=\"contained\"\n              onClick={() => setIsEditModalShown(true)}\n            >\n              Edit\n              <FiEdit size={23} />\n            </StyledDelButton>\n            <StyledDelButton\n              fullWidth\n              variant=\"contained\"\n              onClick={() => setIsDeleteModalShown(true)}\n            >\n              Delete\n              <MdDelete size={23} />\n            </StyledDelButton>\n          </ContentWrapper>\n        </InnerWrapper>\n      </OuterWrapper>\n      {isEditModalShown && (\n        <FormModal onClose={closeModal}>\n          <ContactForm\n            handleContactChange={handleEditContact}\n            initialValues={{ name, id, number }}\n          />\n        </FormModal>\n      )}\n      {isDeleteModalShown && (\n        <DeleteModal\n          agreeFunc={handleDeleteContact}\n          onClose={closeModal}\n          toDeleteName={name}\n        />\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  min-height: 700px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { addContact, getContacts } from 'redux/contacts/contactsApiThunk';\nimport { errorNotify } from 'utils';\n\nimport { ContactForm } from 'components/ContactFormThunk';\nimport { Controlls } from 'components/Controlls';\nimport { Modal } from 'components/Modal';\nimport { FormModal } from 'components/FormModal';\nimport { Spinner } from 'components/Spinner';\nimport { ContactList } from 'components/ContactListThunk';\nimport { ContactCard } from 'components/ContactCardThunk';\nimport { ContentWrapper } from './Phonebook.styled';\n\nexport const Phonebook = () => {\n  const [isModalShown, setIsModalShown] = useState(false);\n  const [contactCardData, setContactCardData] = useState(null);\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (error) {\n      errorNotify(error);\n    }\n  }, [error]);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const handleAddContact = data => {\n    dispatch(addContact(data));\n    toggleModal();\n  };\n\n  const toggleModal = () => {\n    setIsModalShown(state => !state);\n  };\n\n  return (\n    <div style={{ flexGrow: 1 }}>\n      <Controlls toggleModal={toggleModal} />\n\n      {isModalShown && (\n        <FormModal onClose={toggleModal}>\n          <ContactForm handleContactChange={handleAddContact} />\n        </FormModal>\n      )}\n\n      {isLoading && (\n        <Modal>\n          <Spinner position=\"center\" />\n        </Modal>\n      )}\n      {error && errorNotify()}\n      <ContentWrapper>\n        <ContactList chooseContact={setContactCardData} />\n        {contactCardData && (\n          <ContactCard\n            chooseContact={setContactCardData}\n            data={contactCardData}\n          />\n        )}\n      </ContentWrapper>\n    </div>\n  );\n};\n","import { Phonebook } from 'components/Phonekook(create_async_thunk)';\nimport { Container } from 'components/Container.styled';\nimport { UserCard } from 'components/UserCard';\nimport { Section, Wrapper } from 'pages/PhonebookPage.styled';\n\nconst PhonebookPageThunk = () => {\n  return (\n    <>\n      <Section>\n        <Container>\n          <Wrapper>\n            <UserCard />\n            <Phonebook />\n          </Wrapper>\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default PhonebookPageThunk;\n"],"names":["FormButton","styled","TextButton","STATUS","nameExpression","RegExp","ContactForm","initialValues","handleContactChange","contacts","useSelector","selectContacts","contactSchema","object","name","string","required","min","matches","test","value","findContactByNameAndId","findContactByName","number","findContactByNumberAndId","findContactByNumber","nameValue","find","numberValue","contact","id","validationSchema","onSubmit","values","errors","touched","handleChange","handleBlur","className","css","TextInput","type","onChange","onBlur","Notification","status","text","Card","TextField","ContactItem","src","contactImage","alt","StyledList","StyledItem","generateLetter","MessageWrapper","ContactList","chooseContact","filteredContacts","selectFilteredContacts","option","selectFilterByOption","usedLetters","data","arrOfLetters","letter","toUpperCase","includes","push","map","item","isUsed","findUsedLetters","letterToGenerate","letterOptions","i","length","onClick","Message","OuterWrapper","InnerWrapper","ContentWrapper","InfoWrapper","ImageWrapper","StyledDelButton","Button","ContactCard","dispatch","useDispatch","useState","isDeleteModalShown","setIsDeleteModalShown","isEditModalShown","setIsEditModalShown","closeModal","handleDeleteContact","removeContact","handleEditContact","editContact","userImage","width","ContactCardOptions","fullWidth","variant","size","FormModal","onClose","DeleteModal","agreeFunc","toDeleteName","Phonebook","isModalShown","setIsModalShown","contactCardData","setContactCardData","isLoading","selectIsLoading","error","selectError","useEffect","errorNotify","getContacts","toggleModal","state","style","flexGrow","Controlls","addContact","Modal","Spinner","position","UserCard"],"sourceRoot":""}